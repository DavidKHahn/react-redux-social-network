{"ast":null,"code":"import axios from 'axios';\nimport { setAuthToken } from '../utils/setAuthToken';\nimport { setAlert } from './alert';\nimport { AUTH_ERROR, REGISTER_FAIL, REGISTER_SUCCESS, USER_LOADED } from './types'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (error) {\n    const errors = error.response.data.errors; // dispatches each error msg back onto client side with 'danger'\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/Users/dhjkmedia/Desktop/social_network/client/src/actions/auth.js"],"names":["axios","setAuthToken","setAlert","AUTH_ERROR","REGISTER_FAIL","REGISTER_SUCCESS","USER_LOADED","loadUser","dispatch","localStorage","token","res","get","type","payload","data","error","errors","response","forEach","msg","register","name","email","password","config","headers","body","JSON","stringify","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,gBAApC,EAAsDC,WAAtD,QAAyE,SAAzE,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC5C,MAAGC,YAAY,CAACC,KAAhB,EAAuB;AACnBT,IAAAA,YAAY,CAACQ,YAAY,CAACC,KAAd,CAAZ;AACH;;AAED,MAAI;AACA,UAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAU,UAAV,CAAlB;AAEAJ,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEP,WADD;AAELQ,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIH,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZ,UAAMC,MAAM,GAAGD,KAAK,CAACE,QAAN,CAAeH,IAAf,CAAoBE,MAAnC;;AACA,QAAIA,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACE,OAAP,CAAeH,KAAK,IAAIR,QAAQ,CAACN,QAAQ,CAACc,KAAK,CAACI,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACH;;AACDZ,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEV;AADD,KAAD,CAAR;AAGH;AACJ,CArBM,C,CAuBP;;AACA,OAAO,MAAMkB,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA+B,MAAMhB,QAAN,IAAkB;AACrE,QAAMiB,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;;AAEA,MAAI;AACA,UAAMb,GAAG,GAAG,MAAMX,KAAK,CAAC8B,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,CAAlB;AACAjB,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAER,gBADD;AAELS,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIH,GAND,CAME,OAAOC,KAAP,EAAc;AACZ,UAAMC,MAAM,GAAGD,KAAK,CAACE,QAAN,CAAeH,IAAf,CAAoBE,MAAnC,CADY,CAEZ;;AACA,QAAGA,MAAH,EAAW;AACPA,MAAAA,MAAM,CAACE,OAAP,CAAeH,KAAK,IAAIR,QAAQ,CAACN,QAAQ,CAACc,KAAK,CAACI,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACH;;AACDZ,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAET;AADD,KAAD,CAAR;AAGH;AACJ,CAzBM","sourcesContent":["import axios from 'axios';\nimport { setAuthToken } from '../utils/setAuthToken';\nimport { setAlert } from './alert';\nimport { AUTH_ERROR, REGISTER_FAIL, REGISTER_SUCCESS, USER_LOADED } from './types';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n    if(localStorage.token) {\n        setAuthToken(localStorage.token);\n    }\n\n    try {\n        const res = await axios.get('api/auth');\n\n        dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        })\n    } catch (error) {\n        const errors = error.response.data.errors;\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n        }\n        dispatch({\n            type: AUTH_ERROR\n        });\n    }\n}\n\n// Register User\nexport const register = ({ name, email, password }) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({ name, email, password });\n\n    try {\n        const res = await axios.post('/api/users', body, config);\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        });\n    } catch (error) {\n        const errors = error.response.data.errors;\n        // dispatches each error msg back onto client side with 'danger'\n        if(errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n        }\n        dispatch({\n            type: REGISTER_FAIL\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}