{"ast":null,"code":"import _toConsumableArray from\"/Users/dhjkmedia/Desktop/social_network/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/dhjkmedia/Desktop/social_network/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ADD_COMMENT,ADD_POST,DELETE_POST,GET_POST,GET_POSTS,POST_ERROR,REMOVE_COMMENT,UPDATE_LIKES}from'../actions/types';var initialState={posts:[],post:null,error:{},loading:true};export default function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;var type=action.type,payload=action.payload;switch(type){case GET_POSTS:return _objectSpread({},state,{posts:payload,loading:false});case GET_POST:return _objectSpread({},state,{post:payload,loading:false});case ADD_POST:return _objectSpread({},state,{// setting 'payload' first will set new posts first in UI\nposts:[payload].concat(_toConsumableArray(state.posts)),loading:false});case DELETE_POST:return _objectSpread({},state,{// return all posts except one matching id\nposts:state.posts.filter(function(post){return post._id!==payload;}),loading:false});case POST_ERROR:return _objectSpread({},state,{error:payload,loading:false});case UPDATE_LIKES:return _objectSpread({},state,{posts:state.posts.map(function(post){return post._id===payload.id?_objectSpread({},post,{likes:payload.likes}):post;}),loading:false});case ADD_COMMENT:return _objectSpread({},state,{post:_objectSpread({},state.post,{comments:payload}),loading:false});case REMOVE_COMMENT:return _objectSpread({},state,{post:_objectSpread({},state.post,{// filter out comment with specific id\ncomments:state.post.comments.filter(function(comment){return comment._id!==payload;})}),loading:false});default:return state;}}","map":{"version":3,"sources":["/Users/dhjkmedia/Desktop/social_network/client/src/reducers/post.js"],"names":["ADD_COMMENT","ADD_POST","DELETE_POST","GET_POST","GET_POSTS","POST_ERROR","REMOVE_COMMENT","UPDATE_LIKES","initialState","posts","post","error","loading","state","action","type","payload","filter","_id","map","id","likes","comments","comment"],"mappings":"yQAAA,OAASA,WAAT,CAAsBC,QAAtB,CAAgCC,WAAhC,CAA6CC,QAA7C,CAAuDC,SAAvD,CAAkEC,UAAlE,CAA8EC,cAA9E,CAA8FC,YAA9F,KAAkH,kBAAlH,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,KAAK,CAAE,EADU,CAEjBC,IAAI,CAAE,IAFW,CAGjBC,KAAK,CAAE,EAHU,CAIjBC,OAAO,CAAE,IAJQ,CAArB,CAOA,cAAe,WAAwC,IAA9BC,CAAAA,KAA8B,2DAAtBL,YAAsB,IAARM,CAAAA,MAAQ,8CAC3CC,CAAAA,IAD2C,CACzBD,MADyB,CAC3CC,IAD2C,CACrCC,OADqC,CACzBF,MADyB,CACrCE,OADqC,CAGnD,OAAQD,IAAR,EACI,IAAKX,CAAAA,SAAL,CACI,wBACOS,KADP,EAEIJ,KAAK,CAAEO,OAFX,CAGIJ,OAAO,CAAE,KAHb,GAKJ,IAAKT,CAAAA,QAAL,CACI,wBACOU,KADP,EAEIH,IAAI,CAAEM,OAFV,CAGIJ,OAAO,CAAE,KAHb,GAKJ,IAAKX,CAAAA,QAAL,CACI,wBACOY,KADP,EAEI;AACAJ,KAAK,EAAGO,OAAH,4BAAeH,KAAK,CAACJ,KAArB,EAHT,CAIIG,OAAO,CAAE,KAJb,GAMJ,IAAKV,CAAAA,WAAL,CACI,wBACOW,KADP,EAEI;AACAJ,KAAK,CAAEI,KAAK,CAACJ,KAAN,CAAYQ,MAAZ,CAAmB,SAAAP,IAAI,QAAIA,CAAAA,IAAI,CAACQ,GAAL,GAAaF,OAAjB,EAAvB,CAHX,CAIIJ,OAAO,CAAE,KAJb,GAMJ,IAAKP,CAAAA,UAAL,CACI,wBACOQ,KADP,EAEIF,KAAK,CAAEK,OAFX,CAGIJ,OAAO,CAAE,KAHb,GAKJ,IAAKL,CAAAA,YAAL,CACI,wBACOM,KADP,EAEIJ,KAAK,CAAEI,KAAK,CAACJ,KAAN,CAAYU,GAAZ,CAAgB,SAAAT,IAAI,QAAIA,CAAAA,IAAI,CAACQ,GAAL,GAAaF,OAAO,CAACI,EAArB,kBAA+BV,IAA/B,EAAqCW,KAAK,CAAEL,OAAO,CAACK,KAApD,GAA8DX,IAAlE,EAApB,CAFX,CAGIE,OAAO,CAAE,KAHb,GAKJ,IAAKZ,CAAAA,WAAL,CACI,wBACOa,KADP,EAEIH,IAAI,kBAAOG,KAAK,CAACH,IAAb,EAAmBY,QAAQ,CAAEN,OAA7B,EAFR,CAGIJ,OAAO,CAAE,KAHb,GAKJ,IAAKN,CAAAA,cAAL,CACI,wBACOO,KADP,EAEIH,IAAI,kBACGG,KAAK,CAACH,IADT,EAEA;AACAY,QAAQ,CAAET,KAAK,CAACH,IAAN,CAAWY,QAAX,CAAoBL,MAApB,CAA2B,SAAAM,OAAO,QAAIA,CAAAA,OAAO,CAACL,GAAR,GAAgBF,OAApB,EAAlC,CAHV,EAFR,CAOIJ,OAAO,CAAE,KAPb,GASJ,QACI,MAAOC,CAAAA,KAAP,CAxDR,CA0DH","sourcesContent":["import { ADD_COMMENT, ADD_POST, DELETE_POST, GET_POST, GET_POSTS, POST_ERROR, REMOVE_COMMENT, UPDATE_LIKES } from '../actions/types';\n\nconst initialState = {\n    posts: [],\n    post: null,\n    error: {},\n    loading: true\n}\n\nexport default function (state = initialState, action) {\n    const { type, payload } = action;\n\n    switch (type) {\n        case GET_POSTS:\n            return {\n                ...state,\n                posts: payload,\n                loading: false\n            }\n        case GET_POST:\n            return {\n                ...state,\n                post: payload,\n                loading: false\n            }\n        case ADD_POST:\n            return {\n                ...state,\n                // setting 'payload' first will set new posts first in UI\n                posts: [payload, ...state.posts],\n                loading: false\n            }\n        case DELETE_POST:\n            return {\n                ...state,\n                // return all posts except one matching id\n                posts: state.posts.filter(post => post._id !== payload),\n                loading: false\n            }\n        case POST_ERROR:\n            return {\n                ...state,\n                error: payload,\n                loading: false\n            }\n        case UPDATE_LIKES:\n            return {\n                ...state,\n                posts: state.posts.map(post => post._id === payload.id ? { ...post, likes: payload.likes } : post),\n                loading: false\n            }\n        case ADD_COMMENT:\n            return {\n                ...state,\n                post: { ...state.post, comments: payload },\n                loading: false\n            }\n        case REMOVE_COMMENT:\n            return {\n                ...state,\n                post: {\n                    ...state.post,\n                    // filter out comment with specific id\n                    comments: state.post.comments.filter(comment => comment._id !== payload)\n                },\n                loading: false\n            }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}