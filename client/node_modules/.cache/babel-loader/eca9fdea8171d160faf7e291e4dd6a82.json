{"ast":null,"code":"import { ADD_COMMENT, ADD_POST, DELETE_POST, GET_POST, GET_POSTS, POST_ERROR, REMOVE_COMMENT, UPDATE_LIKES } from '../actions/types';\nconst initialState = {\n  posts: [],\n  post: null,\n  error: {},\n  loading: true\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return { ...state,\n        posts: payload,\n        loading: false\n      };\n\n    case GET_POST:\n      return { ...state,\n        post: payload,\n        loading: false\n      };\n\n    case ADD_POST:\n      return { ...state,\n        // setting 'payload' first will set new posts first in UI\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        // return all posts except one matching id\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n\n    case POST_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    case UPDATE_LIKES:\n      return { ...state,\n        posts: state.posts.map(post => post._id === payload.id ? { ...post,\n          likes: payload.likes\n        } : post),\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: payload\n        },\n        loading: false\n      };\n\n    case REMOVE_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          // filter out comment with specific id\n          comments: state.post.comments.filter(comment => comment._id == payload)\n        },\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/dhjkmedia/Desktop/social_network/client/src/reducers/post.js"],"names":["ADD_COMMENT","ADD_POST","DELETE_POST","GET_POST","GET_POSTS","POST_ERROR","REMOVE_COMMENT","UPDATE_LIKES","initialState","posts","post","error","loading","state","action","type","payload","filter","_id","map","id","likes","comments","comment"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,WAAhC,EAA6CC,QAA7C,EAAuDC,SAAvD,EAAkEC,UAAlE,EAA8EC,cAA9E,EAA8FC,YAA9F,QAAkH,kBAAlH;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,IAAI,EAAE,IAFW;AAGjBC,EAAAA,KAAK,EAAE,EAHU;AAIjBC,EAAAA,OAAO,EAAE;AAJQ,CAArB;AAOA,eAAe,UAAUC,KAAK,GAAGL,YAAlB,EAAgCM,MAAhC,EAAwC;AACnD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQC,IAAR;AACI,SAAKX,SAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHJ,QAAAA,KAAK,EAAEO,OAFJ;AAGHJ,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKT,QAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHH,QAAAA,IAAI,EAAEM,OAFH;AAGHJ,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKX,QAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEH;AACAJ,QAAAA,KAAK,EAAE,CAACO,OAAD,EAAU,GAAGH,KAAK,CAACJ,KAAnB,CAHJ;AAIHG,QAAAA,OAAO,EAAE;AAJN,OAAP;;AAMJ,SAAKV,WAAL;AACI,aAAO,EACH,GAAGW,KADA;AAEH;AACAJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYQ,MAAZ,CAAmBP,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaF,OAAxC,CAHJ;AAIHJ,QAAAA,OAAO,EAAE;AAJN,OAAP;;AAMJ,SAAKP,UAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHF,QAAAA,KAAK,EAAEK,OAFJ;AAGHJ,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKL,YAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYU,GAAZ,CAAgBT,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaF,OAAO,CAACI,EAArB,GAA0B,EAAE,GAAGV,IAAL;AAAWW,UAAAA,KAAK,EAAEL,OAAO,CAACK;AAA1B,SAA1B,GAA8DX,IAAtF,CAFJ;AAGHE,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKZ,WAAL;AACI,aAAO,EACH,GAAGa,KADA;AAEHH,QAAAA,IAAI,EAAE,EAAE,GAAGG,KAAK,CAACH,IAAX;AAAiBY,UAAAA,QAAQ,EAAEN;AAA3B,SAFH;AAGHJ,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKN,cAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHH,QAAAA,IAAI,EAAE,EACF,GAAGG,KAAK,CAACH,IADP;AAEF;AACAY,UAAAA,QAAQ,EAAET,KAAK,CAACH,IAAN,CAAWY,QAAX,CAAoBL,MAApB,CAA2BM,OAAO,IAAIA,OAAO,CAACL,GAAR,IAAeF,OAArD;AAHR,SAFH;AAOHJ,QAAAA,OAAO,EAAE;AAPN,OAAP;;AASJ;AACI,aAAOC,KAAP;AAxDR;AA0DH","sourcesContent":["import { ADD_COMMENT, ADD_POST, DELETE_POST, GET_POST, GET_POSTS, POST_ERROR, REMOVE_COMMENT, UPDATE_LIKES } from '../actions/types';\n\nconst initialState = {\n    posts: [],\n    post: null,\n    error: {},\n    loading: true\n}\n\nexport default function (state = initialState, action) {\n    const { type, payload } = action;\n\n    switch (type) {\n        case GET_POSTS:\n            return {\n                ...state,\n                posts: payload,\n                loading: false\n            }\n        case GET_POST:\n            return {\n                ...state,\n                post: payload,\n                loading: false\n            }\n        case ADD_POST:\n            return {\n                ...state,\n                // setting 'payload' first will set new posts first in UI\n                posts: [payload, ...state.posts],\n                loading: false\n            }\n        case DELETE_POST:\n            return {\n                ...state,\n                // return all posts except one matching id\n                posts: state.posts.filter(post => post._id !== payload),\n                loading: false\n            }\n        case POST_ERROR:\n            return {\n                ...state,\n                error: payload,\n                loading: false\n            }\n        case UPDATE_LIKES:\n            return {\n                ...state,\n                posts: state.posts.map(post => post._id === payload.id ? { ...post, likes: payload.likes } : post),\n                loading: false\n            }\n        case ADD_COMMENT:\n            return {\n                ...state,\n                post: { ...state.post, comments: payload },\n                loading: false\n            }\n        case REMOVE_COMMENT:\n            return {\n                ...state,\n                post: {\n                    ...state.post,\n                    // filter out comment with specific id\n                    comments: state.post.comments.filter(comment => comment._id == payload)\n                },\n                loading: false\n            }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}