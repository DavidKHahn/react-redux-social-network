{"ast":null,"code":"var _jsxFileName = \"/Users/dhjkmedia/Desktop/social_network/client/src/components/profile/ProfileGithub.js\";\nimport PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { getGithubRepos } from '../../actions/profile';\nimport Spinner from '../layout/Spinner';\n\nconst ProfileGithub = ({\n  username,\n  getGithubRepos,\n  repos\n}) => {\n  useEffect(() => {\n    getGithubRepos(username);\n  }, [getGithubRepos]);\n  return React.createElement(\"div\", {\n    className: \"profile-github\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"text-primary my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Github Repos\"), repos === null ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }) : repos.map(repo => React.createElement(\"div\", {\n    key: repo._id,\n    className: \"repo bg-white p-1 my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: repo.html_url,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, repo.name))))));\n};\n\nProfileGithub.propTypes = {\n  getGithubRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired,\n  username: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  repos: state.profile.repos\n});\n\nexport default connect(mapStateToProps, {\n  getGithubRepos\n})(ProfileGithub);","map":{"version":3,"sources":["/Users/dhjkmedia/Desktop/social_network/client/src/components/profile/ProfileGithub.js"],"names":["PropTypes","React","useEffect","connect","getGithubRepos","Spinner","ProfileGithub","username","repos","map","repo","_id","html_url","name","propTypes","func","isRequired","array","string","mapStateToProps","state","profile"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,OAAP,MAAoB,mBAApB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYH,EAAAA,cAAZ;AAA4BI,EAAAA;AAA5B,CAAD,KAAyC;AAC3DN,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,cAAc,CAACG,QAAD,CAAd;AACH,GAFQ,EAEN,CAACH,cAAD,CAFM,CAAT;AAIA,SACA;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEKI,KAAK,KAAK,IAAV,GAAiB,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjB,GACGA,KAAK,CAACC,GAAN,CAAUC,IAAI,IACV;AAAK,IAAA,GAAG,EAAEA,IAAI,CAACC,GAAf;AAAoB,IAAA,SAAS,EAAC,wBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,IAAI,EAAED,IAAI,CAACE,QAAd;AAAwB,IAAA,MAAM,EAAC,QAA/B;AAAwC,IAAA,GAAG,EAAC,qBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,IAAI,CAACG,IADV,CADJ,CADJ,CADJ,CADJ,CAHR,CADA;AAkBH,CAvBD;;AAyBAP,aAAa,CAACQ,SAAd,GAA0B;AACtBV,EAAAA,cAAc,EAAEJ,SAAS,CAACe,IAAV,CAAeC,UADT;AAEtBR,EAAAA,KAAK,EAAER,SAAS,CAACiB,KAAV,CAAgBD,UAFD;AAGtBT,EAAAA,QAAQ,EAAEP,SAAS,CAACkB,MAAV,CAAiBF;AAHL,CAA1B;;AAMA,MAAMG,eAAe,GAAGC,KAAK,KAAK;AAC9BZ,EAAAA,KAAK,EAAEY,KAAK,CAACC,OAAN,CAAcb;AADS,CAAL,CAA7B;;AAIA,eAAeL,OAAO,CAACgB,eAAD,EAAkB;AAAEf,EAAAA;AAAF,CAAlB,CAAP,CAA6CE,aAA7C,CAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { getGithubRepos } from '../../actions/profile';\nimport Spinner from '../layout/Spinner';\n\nconst ProfileGithub = ({ username, getGithubRepos, repos }) => {\n    useEffect(() => {\n        getGithubRepos(username)\n    }, [getGithubRepos])\n\n    return (\n    <div className=\"profile-github\">\n        <h2 className=\"text-primary my-1\">Github Repos</h2>\n        {repos === null ? <Spinner /> : (\n            repos.map(repo => (\n                <div key={repo._id} className='repo bg-white p-1 my-1'>\n                    <div>\n                        <h4>\n                            <a href={repo.html_url} target='_blank' rel='noopener noreferrer'>\n                                {repo.name}\n                            </a>\n                        </h4>\n                    </div>\n                </div>\n            ))\n        )}\n    </div>\n    )\n}\n\nProfileGithub.propTypes = {\n    getGithubRepos: PropTypes.func.isRequired,\n    repos: PropTypes.array.isRequired,\n    username: PropTypes.string.isRequired\n}\n\nconst mapStateToProps = state => ({\n    repos: state.profile.repos\n})\n\nexport default connect(mapStateToProps, { getGithubRepos })(ProfileGithub)\n"]},"metadata":{},"sourceType":"module"}